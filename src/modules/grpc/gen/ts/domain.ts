// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: domain.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "seasnail.v1";

/** Enum representing domain status */
export enum DomainStatus {
  DOMAIN_STATUS_UNSPECIFIED = 0,
  DOMAIN_STATUS_ACTIVE = 1,
  DOMAIN_STATUS_INACTIVE = 2,
  UNRECOGNIZED = -1,
}

/** Request message to register a new domain */
export interface RegisterDomainRequest {
  domain: string;
  basePrice: number;
  defaultTtl: number;
}

/** Response message for RegisterDomain */
export interface RegisterDomainResponse {
  id: string;
  domain: string;
  basePrice: number;
  defaultTtl: number;
  status: DomainStatus;
}

/** Request message to update a domain */
export interface UpdateDomainRequest {
  id: string;
  domain?: string | undefined;
  basePrice?: number | undefined;
  defaultTtl?: number | undefined;
  status?: DomainStatus | undefined;
}

/** Response message for UpdateDomain */
export interface UpdateDomainResponse {
  id: string;
  domain: string;
  basePrice: number;
  defaultTtl: number;
  status: DomainStatus;
}

/** Request message to delete a domain by ID */
export interface DeleteDomainRequest {
  id: string;
}

/** Response message for DeleteDomain */
export interface DeleteDomainResponse {
}

export const SEASNAIL_V1_PACKAGE_NAME = "seasnail.v1";

/** Domain management service */

export interface DomainServiceClient {
  registerDomain(request: RegisterDomainRequest, metadata?: Metadata): Observable<RegisterDomainResponse>;

  updateDomain(request: UpdateDomainRequest, metadata?: Metadata): Observable<UpdateDomainResponse>;

  deleteDomain(request: DeleteDomainRequest, metadata?: Metadata): Observable<DeleteDomainResponse>;
}

/** Domain management service */

export interface DomainServiceController {
  registerDomain(
    request: RegisterDomainRequest,
    metadata?: Metadata,
  ): Promise<RegisterDomainResponse> | Observable<RegisterDomainResponse> | RegisterDomainResponse;

  updateDomain(
    request: UpdateDomainRequest,
    metadata?: Metadata,
  ): Promise<UpdateDomainResponse> | Observable<UpdateDomainResponse> | UpdateDomainResponse;

  deleteDomain(
    request: DeleteDomainRequest,
    metadata?: Metadata,
  ): Promise<DeleteDomainResponse> | Observable<DeleteDomainResponse> | DeleteDomainResponse;
}

export function DomainServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerDomain", "updateDomain", "deleteDomain"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DomainService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DomainService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOMAIN_SERVICE_NAME = "DomainService";
