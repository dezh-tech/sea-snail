// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: identifier.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "seasnail.v1";

/** Enum representing identifier status */
export enum IdentifierStatus {
  IDENTIFIER_STATUS_UNSPECIFIED = 0,
  IDENTIFIER_STATUS_ACTIVE = 1,
  IDENTIFIER_STATUS_INACTIVE = 2,
  UNRECOGNIZED = -1,
}

/** Request message to register a new identifier */
export interface RegisterIdentifierRequest {
  name: string;
  domainId: string;
  user: string;
  expireAt: number;
}

/** Response message for RegisterIdentifier */
export interface RegisterIdentifierResponse {
  id: string;
  name: string;
  domainId: string;
  user: string;
  expireAt: number;
  fullIdentifier: string;
  status: IdentifierStatus;
}

/** Request message to update an identifier */
export interface UpdateIdentifierRequest {
  id: string;
  name?: string | undefined;
  domainId?: string | undefined;
  user?: string | undefined;
  expireAt?: number | undefined;
  fullIdentifier?: string | undefined;
  status?: IdentifierStatus | undefined;
}

/** Response message for UpdateIdentifier */
export interface UpdateIdentifierResponse {
  id: string;
  name: string;
  domainId: string;
  user: string;
  expireAt: number;
  fullIdentifier: string;
  status: IdentifierStatus;
}

/** Request message to delete an identifier by ID */
export interface DeleteIdentifierRequest {
  id: string;
}

/** Response message for DeleteIdentifier */
export interface DeleteIdentifierResponse {
}

export const SEASNAIL_V1_PACKAGE_NAME = "seasnail.v1";

/** Identifier management service */

export interface IdentifierServiceClient {
  registerIdentifier(request: RegisterIdentifierRequest, metadata?: Metadata): Observable<RegisterIdentifierResponse>;

  updateIdentifier(request: UpdateIdentifierRequest, metadata?: Metadata): Observable<UpdateIdentifierResponse>;

  deleteIdentifier(request: DeleteIdentifierRequest, metadata?: Metadata): Observable<DeleteIdentifierResponse>;
}

/** Identifier management service */

export interface IdentifierServiceController {
  registerIdentifier(
    request: RegisterIdentifierRequest,
    metadata?: Metadata,
  ): Promise<RegisterIdentifierResponse> | Observable<RegisterIdentifierResponse> | RegisterIdentifierResponse;

  updateIdentifier(
    request: UpdateIdentifierRequest,
    metadata?: Metadata,
  ): Promise<UpdateIdentifierResponse> | Observable<UpdateIdentifierResponse> | UpdateIdentifierResponse;

  deleteIdentifier(
    request: DeleteIdentifierRequest,
    metadata?: Metadata,
  ): Promise<DeleteIdentifierResponse> | Observable<DeleteIdentifierResponse> | DeleteIdentifierResponse;
}

export function IdentifierServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerIdentifier", "updateIdentifier", "deleteIdentifier"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("IdentifierService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("IdentifierService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const IDENTIFIER_SERVICE_NAME = "IdentifierService";
