// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: health.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "relay.v1";

export enum Status {
  UNKNOWN = 0,
  CONNECTED = 1,
  DISCONNECTED = 2,
  UNRECOGNIZED = -1,
}

export interface Service {
  name: string;
  status: Status;
  message: string;
}

export interface StatusRequest {
}

export interface StatusResponse {
  services: Service[];
  uptime: number;
  version: string;
}

export const RELAY_V1_PACKAGE_NAME = "relay.v1";

export interface HealthServiceClient {
  status(request: StatusRequest, metadata?: Metadata): Observable<StatusResponse>;
}

export interface HealthServiceController {
  status(
    request: StatusRequest,
    metadata?: Metadata,
  ): Promise<StatusResponse> | Observable<StatusResponse> | StatusResponse;
}

export function HealthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["status"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HealthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HealthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HEALTH_SERVICE_NAME = "HealthService";
