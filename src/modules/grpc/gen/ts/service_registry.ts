// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: service_registry.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "manager.v1";

export enum ServiceTypeEnum {
  UNKNOWN = 0,
  RELAY = 1,
  NIP05 = 2,
  UNRECOGNIZED = -1,
}

export interface RegisterServiceRequest {
  port: string;
  heartbeatDurationInSec: number;
  type: ServiceTypeEnum;
  region: string;
}

export interface RegisterServiceResponse {
  success: boolean;
  message?: string | undefined;
  token: string;
}

export const MANAGER_V1_PACKAGE_NAME = "manager.v1";

export interface ServiceRegistryClient {
  registerService(request: RegisterServiceRequest, metadata?: Metadata): Observable<RegisterServiceResponse>;
}

export interface ServiceRegistryController {
  registerService(
    request: RegisterServiceRequest,
    metadata?: Metadata,
  ): Promise<RegisterServiceResponse> | Observable<RegisterServiceResponse> | RegisterServiceResponse;
}

export function ServiceRegistryControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerService"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ServiceRegistry", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ServiceRegistry", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SERVICE_REGISTRY_SERVICE_NAME = "ServiceRegistry";
